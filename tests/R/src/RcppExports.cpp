// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// parallel_matrix
Rcpp::List parallel_matrix(int nthreads, int nrow, int ncol);
RcppExport SEXP _manticore_tests_parallel_matrix(SEXP nthreadsSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_matrix(nthreads, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// parallel_runif
Rcpp::List parallel_runif(int nthreads, int iterations, int number);
RcppExport SEXP _manticore_tests_parallel_runif(SEXP nthreadsSEXP, SEXP iterationsSEXP, SEXP numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type number(numberSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_runif(nthreads, iterations, number));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_manticore_tests_parallel_matrix", (DL_FUNC) &_manticore_tests_parallel_matrix, 3},
    {"_manticore_tests_parallel_runif", (DL_FUNC) &_manticore_tests_parallel_runif, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_manticore_tests(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
